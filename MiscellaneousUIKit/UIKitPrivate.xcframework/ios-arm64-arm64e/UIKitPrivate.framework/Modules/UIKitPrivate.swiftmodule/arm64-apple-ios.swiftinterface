// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.6 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2 -enable-objc-interop -autolink-force-load -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -module-name UIKitPrivate
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Swift
import UIKit
import Foundation
@_exported import UIKitPrivate
import _Concurrency
import CoreGraphics

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
@_Concurrency.MainActor
public enum IntelligenceUI {
    @_Concurrency.MainActor
    open class PromptComposeViewController: UIKit.UIViewController, UIKitPrivate.IntelligenceUI.PromptEntryView.Delegate {
        public override init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
        public final var promptComposeView: UIKitPrivate.IntelligenceUI.PromptComposeView { get }

        open func promptEntryViewTextDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
        open func promptEntryViewSelectionDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
        open func promptEntryViewShouldBeginEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView) -> Swift.Bool
        open func promptEntryViewDidEndEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
        open func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, disambiguationMenuFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolvedAmbiguity: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>?) -> UIKit.UIMenu
        open func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, customAppearanceFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolved: Swift.Bool) -> UIKitPrivate.IntelligenceUI.PromptEntryView.AmbiguityAppearanceConfiguration?
        open func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didToggleLeadingButtonState: Swift.Bool)
        open func promptEntryViewDidSubmit(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
        open func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, insert: UIKitPrivate.UITextSuggestion)
        open func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didTransitionToPonderingState: Swift.Bool)
    }

    @_Concurrency.MainActor
    public final class PromptComposeView: UIKit.UIView {
        public var entryView: UIKitPrivate.IntelligenceUI.PromptEntryView { get }
        public var contentView: UIKit.UIView { get set }
        public var inputAreaStackView: UIKit.UIStackView { get }
    }

    @_Concurrency.MainActor
    open class PromptEntryView: UIKit.UIView, UIKit.UITextViewDelegate/*, UITextEffectViewSource */ {
        public protocol Delegate: Swift.AnyObject {
            func promptEntryViewTextDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
            func promptEntryViewSelectionDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
            func promptEntryViewShouldBeginEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView) -> Swift.Bool
            func promptEntryViewDidEndEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
            func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, disambiguationMenuFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolvedAmbiguity: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>?) -> UIKit.UIMenu
            func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, customAppearanceFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolved: Swift.Bool) -> UIKitPrivate.IntelligenceUI.PromptEntryView.AmbiguityAppearanceConfiguration?
            func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didToggleLeadingButtonState: Swift.Bool)
            func promptEntryViewDidSubmit(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
            func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, insert: UIKitPrivate.UITextSuggestion)
            func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didTransitionToPonderingState: Swift.Bool)
        }

        open class BackgroundConfiguration: Swift.Hashable {
            public static func == (lhs: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration, rhs: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration) -> Swift.Bool
            public static var `default`: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration { get }
            public static var intelligent: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration { get }
            public static var intelligentLatency: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration { get }

            public var hashValue: Swift.Int { get }
            public func hash(into: inout Swift.Hasher)
        }

        public enum ReturnKeyBehavior: Swift.Hashable {
            case auto
            case submit
            case newline

            public static func == (lhs: UIKitPrivate.IntelligenceUI.PromptEntryView.ReturnKeyBehavior, rhs: UIKitPrivate.IntelligenceUI.PromptEntryView.ReturnKeyBehavior) -> Swift.Bool
            public var hashValue: Swift.Int { get }
            public func hash(into: inout Swift.Hasher)
        }

        public struct AmbiguityAppearanceConfiguration {
            public init(leadingImage: UIKit.UIImage?, trailingImage: UIKit.UIImage?, attributes: Foundation.AttributeContainer)
        }

        public struct PlaceholderConfiguration {
            public static var `default`: UIKitPrivate.IntelligenceUI.PromptEntryView.PlaceholderConfiguration { get }
            public static var dormant: UIKitPrivate.IntelligenceUI.PromptEntryView.PlaceholderConfiguration { get }
            public init(visualEffect: UIKit.UIVisualEffect?, textColor: UIKit.UIColor)
            public init(textColor: UIKit.UIColor)
        }

        public static var defaultLeadingButtonConfiguration: UIKit.UIButton.Configuration { get }
        public static var defaultTrailingButtonConfiguration: UIKit.UIButton.Configuration { get }
        public static var defaultTextViewPadding: UIKit.UIEdgeInsets { get }
        public static var defaultTypingAttributes: Foundation.AttributeContainer { get }
        public static var defaultAttributesForAmbiguity: Foundation.AttributeContainer { get set }
        public static var defaultAttributesForResolvedAmbiguity: Foundation.AttributeContainer { get set }

        public final var textView: UIKit.UITextView { get }
        open var delegate: Delegate? { get set }
        public final var leadingButton: UIKit.UIButton { get }
        public final var trailingButton: UIKit.UIButton { get }

        public final override func buildMenu(with: UIKit.UIMenuBuilder)
        public final override var intrinsicContentSize: CoreGraphics.CGSize { get }
        open override func sizeThatFits(_: CoreGraphics.CGSize) -> CoreGraphics.CGSize
        public final override func systemLayoutSizeFitting(_: CoreGraphics.CGSize) -> CoreGraphics.CGSize
        public final override func layoutSubviews()
        
        public final func textViewShouldBeginEditing(_: UIKit.UITextView) -> Swift.Bool
        public final func textViewDidBeginEditing(_: UIKit.UITextView)
        public final func textViewDidEndEditing(_: UIKit.UITextView)
        public final func textViewDidChange(_: UIKit.UITextView)
        public final func textView(_: UIKit.UITextView, shouldChangeTextIn: Foundation.NSRange, replacementText: Swift.String) -> Swift.Bool
        public final func textViewDidChangeSelection(_: UIKit.UITextView)
        public final func textView(_: UIKit.UITextView, menuConfigurationFor: UIKit.UITextItem, defaultMenu: UIKit.UIMenu) -> UIKit.UITextItem.MenuConfiguration?

        open var placeholder: Swift.String? { get set }
        open var placeholderConfiguration: UIKitPrivate.IntelligenceUI.PromptEntryView.PlaceholderConfiguration { get set }
        open var accessoryView: UIKit.UIView? { get set }
        open var returnBehavior: UIKitPrivate.IntelligenceUI.PromptEntryView.ReturnKeyBehavior { get set }
        open var characterLimit: Swift.Int? { get set }
        open var isLeadingButtonVisible: Swift.Bool { get set }
        open var isTrailingButtonVisible: Swift.Bool { get set }
        open var trailingButtonActivatesDictationWhenEmpty: Swift.Bool { get set }
        open var trailingButtonHiddenWhenEmpty: Swift.Bool { get set }
        open var trailingButtonShowsClearButtonWhenNotEmpty: Swift.Bool { get set }
        open var isLeadingButtonConfiguredAsToggle: Swift.Bool { get set }
        open var leadingButtonToggleState: Swift.Bool { get set }
        open var backgroundView: UIKitPrivate.UIPromptBackgroundView { get set }
        open var textViewPadding: UIKit.UIEdgeInsets { get set }
        open var isPonderingEffectEnabled: Swift.Bool { get set }
        open var styleAttributesForAmbiguity: Foundation.AttributeContainer { get set }
        open var styleAttributesForResolvedAmbiguity: Foundation.AttributeContainer { get set }

        open func ambiguities<T>() -> [UIKitPrivate.IntelligenceUI.PromptAmbiguity<T>]
        open func ambiguities() -> [UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>]
        open func registerAmbiguity<T>(in: UIKit.UITextRange, data: T) -> UIKitPrivate.IntelligenceUI.PromptAmbiguityID
        open func unregisterAmbiguity(id: UIKitPrivate.IntelligenceUI.PromptAmbiguityID)
        open func unregisterAllAmbiguities()
        open func resolvedAmbiguities<T>() -> [UIKitPrivate.IntelligenceUI.PromptAmbiguity<T>]
        open func resolvedAmbiguities() -> [UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>]
        open func resolveAmbiguity<T>(id: UIKitPrivate.IntelligenceUI.PromptAmbiguityID, resolvedData: T)
        open func unresolveAmbiguity(id: UIKitPrivate.IntelligenceUI.PromptAmbiguityID) -> Any?
        open func presentDisambiguationMenuForNextUnresolvedAmbiguity() -> Swift.Bool
        open var disambiguatedText: Swift.String { get }
        open func displaySuggestions(suggestions: [UIKitPrivate.UITextSuggestion])
        open var backgroundCornerRadius: UIKitPrivate.UIPromptBackgroundView.CornerRadius { get set }
        open var backgroundConfiguration: UIKitPrivate.IntelligenceUI.PromptEntryView.BackgroundConfiguration { get set }
    }

    public struct PromptAmbiguity<T>: Swift.Identifiable {
        public var id: UIKitPrivate.IntelligenceUI.PromptAmbiguityID { get }
        public var range: UIKit.UITextRange { get }
        public var data: T { get }
    }

    public struct PromptAmbiguityID : Swift.Hashable {
        public static func == (lhs: UIKitPrivate.IntelligenceUI.PromptAmbiguityID, rhs: UIKitPrivate.IntelligenceUI.PromptAmbiguityID) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    @_Concurrency.MainActor
    open class RotaryPlaceholderLabel: UIKit.UIView {
        public static var defaultAttributes: Foundation.AttributeContainer { get set }
        public override init(frame: CoreGraphics.CGRect)
        public override required init(coder: Foundation.NSCoder)

        public final override var intrinsicContentSize: CoreGraphics.CGSize { get }
        public final override func sizeThatFits(_: CoreGraphics.CGSize) -> CoreGraphics.CGSize
        public final override func layoutSubviews()

        open var text: Swift.String { get set }
        open var attributedText: Foundation.AttributedString { get set }
        open var textSegmentsCovered: Swift.Bool { get set }

        open func setText(_: Swift.String, animated: Swift.Bool)
        open func setAttributedText(_: Foundation.AttributedString, animated: Swift.Bool)
        open func setTextSegmentsCovered(_: Swift.Bool, animated: Swift.Bool)
    }
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate.IntelligenceUI.PromptEntryView.Delegate {
    func promptEntryViewTextDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
    func promptEntryViewSelectionDidChange(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
    func promptEntryViewShouldBeginEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView) -> Swift.Bool
    func promptEntryViewDidEndEditing(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
    func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, disambiguationMenuFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolvedAmbiguity: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>?) -> UIKit.UIMenu
    func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, customAppearanceFor: UIKitPrivate.IntelligenceUI.PromptAmbiguity<Any>, resolved: Swift.Bool) -> UIKitPrivate.IntelligenceUI.PromptEntryView.AmbiguityAppearanceConfiguration?
    func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didToggleLeadingButtonState: Swift.Bool)
    func promptEntryViewDidSubmit(_: UIKitPrivate.IntelligenceUI.PromptEntryView)
    func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, insert: UIKitPrivate.UITextSuggestion)
    func promptEntryView(_: UIKitPrivate.IntelligenceUI.PromptEntryView, didTransitionToPonderingState: Swift.Bool)
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
@_Concurrency.MainActor
open class UIPromptBackgroundView: UIKit.UIView {
    public struct Configuration: Swift.Hashable {
        public static var `default`: UIKitPrivate.UIPromptBackgroundView.Configuration { get }
        public static var standard: UIKitPrivate.UIPromptBackgroundView.Configuration { get }
        public static var intelligent: UIKitPrivate.UIPromptBackgroundView.Configuration { get }
        public static var intelligentLatency: UIKitPrivate.UIPromptBackgroundView.Configuration { get }
        public static var intelligentWhenFocused: UIKitPrivate.UIPromptBackgroundView.Configuration { get }

        public var cornerRadius: UIKitPrivate.UIPromptBackgroundView.CornerRadius { get set }
        public var fillStyle: UIKitPrivate.UIPromptBackgroundView.FillStyle { get set }
        public var borderColor: UIKit.UIColor { get set }
        public var borderWidth: CoreGraphics.CGFloat { get set }
        public var shadowColor: UIKit.UIColor { get set }
        public var shadowRadius: CoreGraphics.CGFloat { get set }
        public var shadowOpacity: Swift.Float { get set }
        public var shadowOffset: CoreGraphics.CGSize { get set }
        public var intelligenceEffect: UIKitPrivate.UIPromptBackgroundView.CannedIntelligenceEffect { get set }
        public var fillColor: UIKit.UIColor { get set }

        public init(cornerRadius: UIKitPrivate.UIPromptBackgroundView.CornerRadius, fillStyle: UIKitPrivate.UIPromptBackgroundView.FillStyle, borderColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat, shadowColor: UIKit.UIColor, shadowRadius: CoreGraphics.CGFloat, shadowOpacity: Swift.Float, shadowOffset: CoreGraphics.CGSize, shouldUseIntelligenceEffects: Swift.Bool)
        public init(cornerRadius: UIKitPrivate.UIPromptBackgroundView.CornerRadius, fillColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat, shadowColor: UIKit.UIColor, shadowRadius: CoreGraphics.CGFloat, shadowOpacity: Swift.Float, shadowOffset: CoreGraphics.CGSize, shouldUseIntelligenceEffects: Swift.Bool)
        public init()

        public func fillStyle(_: UIKitPrivate.UIPromptBackgroundView.FillStyle) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func shadowOffset(_: CoreGraphics.CGSize) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func shadowColor(_: UIKit.UIColor) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func intelligenceEffect(_: UIKitPrivate.UIPromptBackgroundView.CannedIntelligenceEffect) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func shadowOffset(_: Swift.Float) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func shadowRadius(_: CoreGraphics.CGFloat) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func cornerRadius(_: UIKitPrivate.UIPromptBackgroundView.CornerRadius) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func borderColor(_: UIKit.UIColor) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func borderWidth(_: CoreGraphics.CGFloat) -> UIKitPrivate.UIPromptBackgroundView.Configuration
        public func fillColor(_: UIKit.UIColor) -> UIKitPrivate.UIPromptBackgroundView.Configuration

        public static func == (lhs: UIKitPrivate.UIPromptBackgroundView.Configuration, rhs: UIKitPrivate.UIPromptBackgroundView.Configuration) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    public enum CannedIntelligenceEffect: Swift.Hashable {
        case disabled
        case standard
        case withGlow
        case latency

        public static func == (lhs: UIKitPrivate.UIPromptBackgroundView.CannedIntelligenceEffect, rhs: UIKitPrivate.UIPromptBackgroundView.CannedIntelligenceEffect) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    public enum CornerRadius: Swift.Hashable {
        case constant(Swift.Double)
        case auto
        case none

        public static func == (lhs: UIKitPrivate.UIPromptBackgroundView.CornerRadius, rhs: UIKitPrivate.UIPromptBackgroundView.CornerRadius) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    public enum FillStyle: Swift.Hashable {
        case solid(UIKit.UIColor)
        case material(UIKit.UIBlurEffect.Style)
        case dynamicNaterial(UIKitPrivate.UIPromptBackgroundView.DynamicMaterial)

        public static func == (lhs: UIKitPrivate.UIPromptBackgroundView.FillStyle, rhs: UIKitPrivate.UIPromptBackgroundView.FillStyle) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    public struct DynamicMaterial: Swift.Hashable {
        public init(light: UIKit.UIBlurEffect.Style, dark: UIKit.UIBlurEffect.Style)

        public static func == (lhs: UIKitPrivate.UIPromptBackgroundView.DynamicMaterial, rhs: UIKitPrivate.UIPromptBackgroundView.DynamicMaterial) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
    }

    public init(configuration: UIKitPrivate.UIPromptBackgroundView.Configuration)

    public final var effectView: UIKit.UIVisualEffectView { get }
    open var configuration: UIKitPrivate.UIPromptBackgroundView.Configuration { get set }
    open var intrinsicHeight: CoreGraphics.CGFloat { get set }
    open func updateFocus(state: Swift.Bool)
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
public struct _UIIntelligenceLightSourceConfiguration: Swift.Hashable, Swift.Codable {
    public init(prefersAudioReactivity: Swift.Bool)
    public var prefersAudioReactivity: Swift.Bool { get set }

    public static func == (lhs: UIKitPrivate._UIIntelligenceLightSourceConfiguration, rhs: UIKitPrivate._UIIntelligenceLightSourceConfiguration) -> Swift.Bool
    public var hashValue: Swift.Int { get }
    public func hash(into: inout Swift.Hasher)

    public init(from: Swift.Decoder) throws
    public func encode(to: Swift.Encoder) throws
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate.___UIIntelligenceLightSourceConfiguration {
    public convenience override init()
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKit.UIScene.ConnectionOptions {
    @objc public var intelligenceLightConfiguration: UIKitPrivate.___UIIntelligenceLightSourceConfiguration? { get }
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate._UIIntelligenceLightSourceView {
    public var configuration: UIKitPrivate._UIIntelligenceLightSourceConfiguration { get set }
    public convenience init?(frame: CoreGraphics.CGRect, configuration: UIKitPrivate._UIIntelligenceLightSourceConfiguration?)
    public override required convenience init?(coder: Foundation.NSCoder)
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate._UIIntelligenceSystemNoiseView {
    public convenience init(frame: CoreGraphics.CGRect, preferringAudioReactivity: Swift.Bool)
    // public convenience init(frame: CoreGraphics.CGRect, serviceIdentity: RunningBoardServices.RBSProcessIdentity, sceneSpecification: UIKit.UIApplicationSceneSpecification)
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
open class _UIIntelligenceButton: UIButton {
    public enum Style: Swift.Hashable {
        public static func == (lhs: UIKitPrivate._UIIntelligenceButton.Style, rhs: UIKitPrivate._UIIntelligenceButton.Style) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)

        case monochromatic
        case staticMulticolor
        case livingMulticolor
    }

    open class FillView: UIView {
        public init(frame: CoreGraphics.CGRect, initialStyle: UIKitPrivate._UIIntelligenceButton.Style)
        open var style: UIKitPrivate._UIIntelligenceButton.Style { get set }
    }

    open func setExpanded(_: Swift.Bool, animated: Swift.Bool)
    open var isExpanded: Swift.Bool { get set }
    open var style: UIKitPrivate._UIIntelligenceButton.Style { get set }
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate._UIDirectionalLightPalette {
    public convenience init(_: [UIKit.UIColor])
    public convenience init(_: [(UIKit.UIColor, CoreGraphics.CGFloat)])
    public convenience init(__colors: [UIKit.UIColor], locations: [Foundation.NSNumber])
    @available(*, unavailable) public convenience override init()
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKit.UIView {
    @objc open var _intelligenceBaseClass: Swift.AnyObject.Type { get }
    @objc open var _intelligenceVisibleBounds: CoreGraphics.CGRect { get }
    // @objc open func _intelligenceCollectContent(in: CoreGraphics.CGRect, collector: UIIntelligenceSupport.UIIntelligenceElementCollector)
    // @objc open func _intelligenceCollectSubelements(in: CoreGraphics.CGRect, using: UIIntelligenceSupport.UIIntelligenceElementCollector, transformToRoot: (UIKit.UIView, CoreGraphics.CGRect) -> CoreGraphics.CGRect)
    // @objc open func _intelligenceCollectElement(for: UIKit.UIView, in: CoreGraphics.CGRect, using: UIIntelligenceSupport.UIIntelligenceElementCollector, transformToRoot: (UIKit.UIView, CoreGraphics.CGRect) -> CoreGraphics.CGRect)
    // @objc open func _intelligenceCollectRemoteContent(in: CoreGraphics.CGRect, remoteContextWrapper: UIIntelligenceSupport.UIIntelligenceCollectionRemoteContextWrapper)
    // open var _appIntentsIntelligenceProvider: UIIntelligenceSupport.IntelligenceAppIntentsPayloadProviding & UIIntelligenceSupport.IntelligenceSubelementProviding?
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
public final class _UIIntelligenceCommandManager {
    public struct RunCompletionContext: Swift.Hashable, Swift.Codable {
        public static func == (lhs: UIKitPrivate._UIIntelligenceCommandManager.RunCompletionContext, rhs: UIKitPrivate._UIIntelligenceCommandManager.RunCompletionContext) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
        public init(from: Swift.Decoder) throws
        public func encode(to: Swift.Encoder) throws
    }

    public enum CommandExecutionError: Swift.Hashable, Swift.Error, Swift.CustomStringConvertible {
        case notFound
        case notExecutable

        public static func == (lhs: UIKitPrivate._UIIntelligenceCommandManager.CommandExecutionError, rhs: UIKitPrivate._UIIntelligenceCommandManager.CommandExecutionError) -> Swift.Bool
        public var hashValue: Swift.Int { get }
        public func hash(into: inout Swift.Hasher)
        public var description: Swift.String { get }
    }

    public static var shared: UIKitPrivate._UIIntelligenceCommandManager { get }
    // public final func fetchCommands(options: UIIntelligenceSupport.IntelligenceCollectionRequest.CommandOptions) -> [UIIntelligenceSupport.IntelligenceCommand]
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKit.UIVisualEffect {
    @_silgen_name("$sSo14UIVisualEffectC5UIKitE24intelligenceContentLight6source19activationDirection012deactivationI0So015_UIIntelligenceefB0CSo01_kF16SourceDescriptorC_So01_ab10TransitionI0VAMtFZ")
    public static func intelligenceContentLight(source: UIKitPrivate._UIIntelligenceLightSourceDescriptor, activationDirection: UIKitPrivate._UIVisualEffectTransitionDirection, deactivationDirection: UIKitPrivate._UIVisualEffectTransitionDirection) -> UIKitPrivate._UIIntelligenceContentLightEffect
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
extension UIKitPrivate._UIIntelligenceContentLightEffect {
    public override required convenience init?(coder: Foundation.NSCoder)
    // public func _update(_: UIKitPrivate._UIVisualEffectDescriptor, for: UIKitPrivate._UIVisualEffectEnvironment, usage: UIKitPrivate._UIVisualEffectViewUsageHint)
}

@available(iOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "UIKit", iOS 18.0)
@_originallyDefinedIn(module: "UIKit", visionOS 2.0)
open class _UICloudChamber: UIKit.UIView {
    public struct Configuration: Swift.Equatable {
        public enum RenderMode: Swift.Hashable {
            case unordered
            case oldestFirst
            case oldestLast
            case additive
            case screen
            case maximum
            case colorDodge

            public static func == (lhs: UIKitPrivate._UICloudChamber.Configuration.RenderMode, rhs: UIKitPrivate._UICloudChamber.Configuration.RenderMode) -> Swift.Bool
            public var hashValue: Swift.Int { get }
            public func hash(into: inout Swift.Hasher)
        }

        public init(colors: [UIKit.UIColor], cellCount: Swift.UInt?, lifetime: CoreGraphics.CGFloat?, lifetimeVariation: CoreGraphics.CGFloat?, relativeSize: CoreGraphics.CGFloat?, sizeVariation: CoreGraphics.CGFloat?, growthRate: CoreGraphics.CGFloat?, renderMode: UIKitPrivate._UICloudChamber.Configuration.RenderMode?, spriteRadius: CoreGraphics.CGFloat?, seed: Swift.UInt32?)

        public var colors: [UIKit.UIColor] { get set }
        public var cellCount: Swift.UInt { get set }
        public var lifetime: CoreGraphics.CGFloat { get set }
        public var lifetimeVariation: CoreGraphics.CGFloat { get set }
        public var relativeSize: CoreGraphics.CGFloat { get set }
        public var sizeVariation: CoreGraphics.CGFloat { get set }
        public var growthRate: CoreGraphics.CGFloat { get set }
        public var renderMode: UIKitPrivate._UICloudChamber.Configuration.RenderMode { get set }
        public var spriteRadius: CoreGraphics.CGFloat { get set }
        public var seed: Swift.UInt32 { get set }

        public static func == (lhs: UIKitPrivate._UICloudChamber.Configuration, rhs: UIKitPrivate._UICloudChamber.Configuration) -> Swift.Bool
    }

    public init(frame: CoreGraphics.CGRect, configuration: UIKitPrivate._UICloudChamber.Configuration)

    
    open var configuration: UIKitPrivate._UICloudChamber.Configuration { get set }
}